cmdhistory=["(ns awesome)" "(defn hello-world [] \\n  (println \\"Hello World\\"))" "*ns*" "(ns awesome)" "(hello-world)" "(defn girls\\n  [persons]\\n  (filter \#{\\"Daisy\\" \\"Mini\\"} persons))" "(girls [\\"Donald\\" \\"Mini\\" \\"Daisy\\" \\"Mickey\\"])" "(+ 3 nil?l)" "(+ 3 nil)" "(clojure.core/ns com.itemis.samples.awesome)\\n(defn salary-sums \\n  [employees]\\n  (reduce (fn [sums e]\\n            (update-in sums [(\:city e)] \#(+ (or % 0) (\:salary e))))\\n          {}\\n          employees))\\n(clojure.core/ns awesome)" "(salary-sums [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              [\:city \\"Luenen\\" \:salary 1500]])" "(ns com.itemis.samples.awesome)" "(salary-sums [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              [\:city \\"Luenen\\" \:salary 1500]])" "(>doc update-in)" "(use 'clojure.repl)" "(doc update-in)" "(salary-sums [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              [\:city \\"Luenen\\" \:salary 1500]])" "(pst)" "(or nil 0)" "(or 1 0)" "(defn salary-sums \\n  [employees]\\n  (reduce (fn [sums e]\\n            (println e)\\n            (update-in sums [(\:city e)] \#(+ (or % 0) (\:salary e))))\\n          {}\\n          employees))" "(salary-sums [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              [\:city \\"Luenen\\" \:salary 1500]])" "(salary-sums [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              {\:city \\"Luenen\\" \:salary 1500}])" "(defn salary-sums \\n  [employees]\\n  (reduce (fn [sums e]\\n            (update-in sums [(\:city e)] \#(+ (or % 0) (\:salary e))))\\n          {}\\n          employees))" "(salary-sums [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              {\:city \\"Luenen\\" \:salary 1500}])" "(defn salary-sums \\n  [employees]\\n  (reduce (fn [sums e]\\n            (update-in sums [(\:city e)] \#(+ (or % 0) (\:salary e))))\\n         \\n          employees))" "(salary-sums [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              {\:city \\"Luenen\\" \:salary 1500}])" "(doc reduce)" "(defn sum-by \\n  [f employees]\\n  (reduce (fn [sums e]\\n            (update-in sums [(\:city e)] \#(+ (or % 0) (f e))))\\n         {}\\n         employees))" "(defn sum-by \\n  [f employees]\\n  (reduce (fn [sums e]\\n            (update-in sums [(f e)] \#(+ (or % 0) (\:salary e))))\\n         {}\\n         employees))" "(salary-sums \:city [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              {\:city \\"Luenen\\" \:salary 1500}])" "(sum-by \:city [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              {\:city \\"Luenen\\" \:salary 1500}])" ";; Switching to de.friemen.samples.awesome namespace" "(sum-by \:city [{\:city \\"Bonn\\" \:salary 1000}\\n              {\:city \\"Bonn\\" \:salary 500}\\n              {\:city \\"Luenen\\" \:salary 1500}])" "(require '[clojure.java.data \:as d])" "(d/to-java java.util.Map {\:foo \\"Bar\\"})" "(d/to-java java.util.HashMap {\:foo \\"Bar\\"})"]
eclipse.preferences.version=1
